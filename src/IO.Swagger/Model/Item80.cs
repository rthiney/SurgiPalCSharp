/* 
 * surgipal_master
 *
 * API generated with [PHP-CRUD-API](https://github.com/mevdschee/php-crud-api)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Item80
    /// </summary>
    [DataContract]
    public partial class Item80 :  IEquatable<Item80>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Item80" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Item80() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Item80" /> class.
        /// </summary>
        /// <param name="Id">Id (required).</param>
        /// <param name="Text">Text.</param>
        /// <param name="Placeholder">Placeholder.</param>
        /// <param name="ClusterId">ClusterId.</param>
        /// <param name="QuestionTypeId">QuestionTypeId.</param>
        /// <param name="Active">Active (required).</param>
        /// <param name="Required">Required (required).</param>
        /// <param name="Position">Position.</param>
        /// <param name="Options">Options.</param>
        /// <param name="Indent">Indent.</param>
        public Item80(int? Id = null, string Text = null, string Placeholder = null, int? ClusterId = null, int? QuestionTypeId = null, int? Active = null, int? Required = null, int? Position = null, string Options = null, int? Indent = null)
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for Item80 and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Active" is required (not null)
            if (Active == null)
            {
                throw new InvalidDataException("Active is a required property for Item80 and cannot be null");
            }
            else
            {
                this.Active = Active;
            }
            // to ensure "Required" is required (not null)
            if (Required == null)
            {
                throw new InvalidDataException("Required is a required property for Item80 and cannot be null");
            }
            else
            {
                this.Required = Required;
            }
            this.Text = Text;
            this.Placeholder = Placeholder;
            this.ClusterId = ClusterId;
            this.QuestionTypeId = QuestionTypeId;
            this.Position = Position;
            this.Options = Options;
            this.Indent = Indent;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }
        /// <summary>
        /// Gets or Sets Placeholder
        /// </summary>
        [DataMember(Name="placeholder", EmitDefaultValue=false)]
        public string Placeholder { get; set; }
        /// <summary>
        /// Gets or Sets ClusterId
        /// </summary>
        [DataMember(Name="cluster_id", EmitDefaultValue=false)]
        public int? ClusterId { get; set; }
        /// <summary>
        /// Gets or Sets QuestionTypeId
        /// </summary>
        [DataMember(Name="question_type_id", EmitDefaultValue=false)]
        public int? QuestionTypeId { get; set; }
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public int? Active { get; set; }
        /// <summary>
        /// Gets or Sets Required
        /// </summary>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public int? Required { get; set; }
        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public int? Position { get; set; }
        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public string Options { get; set; }
        /// <summary>
        /// Gets or Sets Indent
        /// </summary>
        [DataMember(Name="indent", EmitDefaultValue=false)]
        public int? Indent { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Item80 {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Placeholder: ").Append(Placeholder).Append("\n");
            sb.Append("  ClusterId: ").Append(ClusterId).Append("\n");
            sb.Append("  QuestionTypeId: ").Append(QuestionTypeId).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Indent: ").Append(Indent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Item80);
        }

        /// <summary>
        /// Returns true if Item80 instances are equal
        /// </summary>
        /// <param name="other">Instance of Item80 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Item80 other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Text == other.Text ||
                    this.Text != null &&
                    this.Text.Equals(other.Text)
                ) && 
                (
                    this.Placeholder == other.Placeholder ||
                    this.Placeholder != null &&
                    this.Placeholder.Equals(other.Placeholder)
                ) && 
                (
                    this.ClusterId == other.ClusterId ||
                    this.ClusterId != null &&
                    this.ClusterId.Equals(other.ClusterId)
                ) && 
                (
                    this.QuestionTypeId == other.QuestionTypeId ||
                    this.QuestionTypeId != null &&
                    this.QuestionTypeId.Equals(other.QuestionTypeId)
                ) && 
                (
                    this.Active == other.Active ||
                    this.Active != null &&
                    this.Active.Equals(other.Active)
                ) && 
                (
                    this.Required == other.Required ||
                    this.Required != null &&
                    this.Required.Equals(other.Required)
                ) && 
                (
                    this.Position == other.Position ||
                    this.Position != null &&
                    this.Position.Equals(other.Position)
                ) && 
                (
                    this.Options == other.Options ||
                    this.Options != null &&
                    this.Options.Equals(other.Options)
                ) && 
                (
                    this.Indent == other.Indent ||
                    this.Indent != null &&
                    this.Indent.Equals(other.Indent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Text != null)
                    hash = hash * 59 + this.Text.GetHashCode();
                if (this.Placeholder != null)
                    hash = hash * 59 + this.Placeholder.GetHashCode();
                if (this.ClusterId != null)
                    hash = hash * 59 + this.ClusterId.GetHashCode();
                if (this.QuestionTypeId != null)
                    hash = hash * 59 + this.QuestionTypeId.GetHashCode();
                if (this.Active != null)
                    hash = hash * 59 + this.Active.GetHashCode();
                if (this.Required != null)
                    hash = hash * 59 + this.Required.GetHashCode();
                if (this.Position != null)
                    hash = hash * 59 + this.Position.GetHashCode();
                if (this.Options != null)
                    hash = hash * 59 + this.Options.GetHashCode();
                if (this.Indent != null)
                    hash = hash * 59 + this.Indent.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Text (string) maxLength
            if(this.Text != null && this.Text.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Text, length must be less than 255.", new [] { "Text" });
            }

            // Placeholder (string) maxLength
            if(this.Placeholder != null && this.Placeholder.Length > -1)
            {
                yield return new ValidationResult("Invalid value for Placeholder, length must be less than -1.", new [] { "Placeholder" });
            }

            // Options (string) maxLength
            if(this.Options != null && this.Options.Length > -1)
            {
                yield return new ValidationResult("Invalid value for Options, length must be less than -1.", new [] { "Options" });
            }

            yield break;
        }
    }

}
