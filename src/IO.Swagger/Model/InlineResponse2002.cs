/* 
 * surgipal_master
 *
 * API generated with [PHP-CRUD-API](https://github.com/mevdschee/php-crud-api)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse2002
    /// </summary>
    [DataContract]
    public partial class InlineResponse2002 :  IEquatable<InlineResponse2002>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2002" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="CardId">CardId.</param>
        /// <param name="DoctorId">DoctorId.</param>
        /// <param name="RespondentId">RespondentId.</param>
        /// <param name="Name">Name.</param>
        /// <param name="CreatedAt">CreatedAt.</param>
        /// <param name="HospitalId">HospitalId.</param>
        /// <param name="ParentSnapshotId">ParentSnapshotId.</param>
        /// <param name="SurgerySnapshot">SurgerySnapshot.</param>
        /// <param name="Cpt">Cpt.</param>
        /// <param name="DiagnosisCode">DiagnosisCode.</param>
        /// <param name="SurgeryTime">SurgeryTime.</param>
        /// <param name="AdmissionStatus">AdmissionStatus.</param>
        public InlineResponse2002(int? Id = null, int? CardId = null, int? DoctorId = null, int? RespondentId = null, string Name = null, string CreatedAt = null, int? HospitalId = null, int? ParentSnapshotId = null, int? SurgerySnapshot = null, string Cpt = null, string DiagnosisCode = null, string SurgeryTime = null, string AdmissionStatus = null)
        {
            this.Id = Id;
            this.CardId = CardId;
            this.DoctorId = DoctorId;
            this.RespondentId = RespondentId;
            this.Name = Name;
            this.CreatedAt = CreatedAt;
            this.HospitalId = HospitalId;
            this.ParentSnapshotId = ParentSnapshotId;
            this.SurgerySnapshot = SurgerySnapshot;
            this.Cpt = Cpt;
            this.DiagnosisCode = DiagnosisCode;
            this.SurgeryTime = SurgeryTime;
            this.AdmissionStatus = AdmissionStatus;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Gets or Sets CardId
        /// </summary>
        [DataMember(Name="card_id", EmitDefaultValue=false)]
        public int? CardId { get; set; }
        /// <summary>
        /// Gets or Sets DoctorId
        /// </summary>
        [DataMember(Name="doctor_id", EmitDefaultValue=false)]
        public int? DoctorId { get; set; }
        /// <summary>
        /// Gets or Sets RespondentId
        /// </summary>
        [DataMember(Name="respondent_id", EmitDefaultValue=false)]
        public int? RespondentId { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }
        /// <summary>
        /// Gets or Sets HospitalId
        /// </summary>
        [DataMember(Name="hospital_id", EmitDefaultValue=false)]
        public int? HospitalId { get; set; }
        /// <summary>
        /// Gets or Sets ParentSnapshotId
        /// </summary>
        [DataMember(Name="parent_snapshot_id", EmitDefaultValue=false)]
        public int? ParentSnapshotId { get; set; }
        /// <summary>
        /// Gets or Sets SurgerySnapshot
        /// </summary>
        [DataMember(Name="surgerySnapshot", EmitDefaultValue=false)]
        public int? SurgerySnapshot { get; set; }
        /// <summary>
        /// Gets or Sets Cpt
        /// </summary>
        [DataMember(Name="cpt", EmitDefaultValue=false)]
        public string Cpt { get; set; }
        /// <summary>
        /// Gets or Sets DiagnosisCode
        /// </summary>
        [DataMember(Name="diagnosisCode", EmitDefaultValue=false)]
        public string DiagnosisCode { get; set; }
        /// <summary>
        /// Gets or Sets SurgeryTime
        /// </summary>
        [DataMember(Name="surgeryTime", EmitDefaultValue=false)]
        public string SurgeryTime { get; set; }
        /// <summary>
        /// Gets or Sets AdmissionStatus
        /// </summary>
        [DataMember(Name="admissionStatus", EmitDefaultValue=false)]
        public string AdmissionStatus { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2002 {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CardId: ").Append(CardId).Append("\n");
            sb.Append("  DoctorId: ").Append(DoctorId).Append("\n");
            sb.Append("  RespondentId: ").Append(RespondentId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  HospitalId: ").Append(HospitalId).Append("\n");
            sb.Append("  ParentSnapshotId: ").Append(ParentSnapshotId).Append("\n");
            sb.Append("  SurgerySnapshot: ").Append(SurgerySnapshot).Append("\n");
            sb.Append("  Cpt: ").Append(Cpt).Append("\n");
            sb.Append("  DiagnosisCode: ").Append(DiagnosisCode).Append("\n");
            sb.Append("  SurgeryTime: ").Append(SurgeryTime).Append("\n");
            sb.Append("  AdmissionStatus: ").Append(AdmissionStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InlineResponse2002);
        }

        /// <summary>
        /// Returns true if InlineResponse2002 instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2002 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2002 other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.CardId == other.CardId ||
                    this.CardId != null &&
                    this.CardId.Equals(other.CardId)
                ) && 
                (
                    this.DoctorId == other.DoctorId ||
                    this.DoctorId != null &&
                    this.DoctorId.Equals(other.DoctorId)
                ) && 
                (
                    this.RespondentId == other.RespondentId ||
                    this.RespondentId != null &&
                    this.RespondentId.Equals(other.RespondentId)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.HospitalId == other.HospitalId ||
                    this.HospitalId != null &&
                    this.HospitalId.Equals(other.HospitalId)
                ) && 
                (
                    this.ParentSnapshotId == other.ParentSnapshotId ||
                    this.ParentSnapshotId != null &&
                    this.ParentSnapshotId.Equals(other.ParentSnapshotId)
                ) && 
                (
                    this.SurgerySnapshot == other.SurgerySnapshot ||
                    this.SurgerySnapshot != null &&
                    this.SurgerySnapshot.Equals(other.SurgerySnapshot)
                ) && 
                (
                    this.Cpt == other.Cpt ||
                    this.Cpt != null &&
                    this.Cpt.Equals(other.Cpt)
                ) && 
                (
                    this.DiagnosisCode == other.DiagnosisCode ||
                    this.DiagnosisCode != null &&
                    this.DiagnosisCode.Equals(other.DiagnosisCode)
                ) && 
                (
                    this.SurgeryTime == other.SurgeryTime ||
                    this.SurgeryTime != null &&
                    this.SurgeryTime.Equals(other.SurgeryTime)
                ) && 
                (
                    this.AdmissionStatus == other.AdmissionStatus ||
                    this.AdmissionStatus != null &&
                    this.AdmissionStatus.Equals(other.AdmissionStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.CardId != null)
                    hash = hash * 59 + this.CardId.GetHashCode();
                if (this.DoctorId != null)
                    hash = hash * 59 + this.DoctorId.GetHashCode();
                if (this.RespondentId != null)
                    hash = hash * 59 + this.RespondentId.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.HospitalId != null)
                    hash = hash * 59 + this.HospitalId.GetHashCode();
                if (this.ParentSnapshotId != null)
                    hash = hash * 59 + this.ParentSnapshotId.GetHashCode();
                if (this.SurgerySnapshot != null)
                    hash = hash * 59 + this.SurgerySnapshot.GetHashCode();
                if (this.Cpt != null)
                    hash = hash * 59 + this.Cpt.GetHashCode();
                if (this.DiagnosisCode != null)
                    hash = hash * 59 + this.DiagnosisCode.GetHashCode();
                if (this.SurgeryTime != null)
                    hash = hash * 59 + this.SurgeryTime.GetHashCode();
                if (this.AdmissionStatus != null)
                    hash = hash * 59 + this.AdmissionStatus.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 255.", new [] { "Name" });
            }

            // Cpt (string) maxLength
            if(this.Cpt != null && this.Cpt.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Cpt, length must be less than 255.", new [] { "Cpt" });
            }

            // DiagnosisCode (string) maxLength
            if(this.DiagnosisCode != null && this.DiagnosisCode.Length > 255)
            {
                yield return new ValidationResult("Invalid value for DiagnosisCode, length must be less than 255.", new [] { "DiagnosisCode" });
            }

            // SurgeryTime (string) maxLength
            if(this.SurgeryTime != null && this.SurgeryTime.Length > 255)
            {
                yield return new ValidationResult("Invalid value for SurgeryTime, length must be less than 255.", new [] { "SurgeryTime" });
            }

            // AdmissionStatus (string) maxLength
            if(this.AdmissionStatus != null && this.AdmissionStatus.Length > 255)
            {
                yield return new ValidationResult("Invalid value for AdmissionStatus, length must be less than 255.", new [] { "AdmissionStatus" });
            }

            yield break;
        }
    }

}
