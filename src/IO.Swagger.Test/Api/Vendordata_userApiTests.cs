/* 
 * surgipal_master
 *
 * API generated with [PHP-CRUD-API](https://github.com/mevdschee/php-crud-api)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing Vendordata_userApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class Vendordata_userApiTests
    {
        private Vendordata_userApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new Vendordata_userApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of Vendordata_userApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' Vendordata_userApi
            //Assert.IsInstanceOfType(typeof(Vendordata_userApi), instance, "instance is a Vendordata_userApi");
        }

        
        /// <summary>
        /// Test VendordataUserGet
        /// </summary>
        [Test]
        public void VendordataUserGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string exclude = null;
            //string include = null;
            //string order = null;
            //string page = null;
            //bool? transform = null;
            //string columns = null;
            //List<string> filter = null;
            //string satisfy = null;
            //var response = instance.VendordataUserGet(exclude, include, order, page, transform, columns, filter, satisfy);
            //Assert.IsInstanceOf<List<InlineResponse20038>> (response, "response is List<InlineResponse20038>");
        }
        
        /// <summary>
        /// Test VendordataUserIdDelete
        /// </summary>
        [Test]
        public void VendordataUserIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.VendordataUserIdDelete(id);
            //Assert.IsInstanceOf<int?> (response, "response is int?");
        }
        
        /// <summary>
        /// Test VendordataUserIdGet
        /// </summary>
        [Test]
        public void VendordataUserIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.VendordataUserIdGet(id);
            //Assert.IsInstanceOf<InlineResponse20038> (response, "response is InlineResponse20038");
        }
        
        /// <summary>
        /// Test VendordataUserIdPatch
        /// </summary>
        [Test]
        public void VendordataUserIdPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Item116 item = null;
            //var response = instance.VendordataUserIdPatch(id, item);
            //Assert.IsInstanceOf<int?> (response, "response is int?");
        }
        
        /// <summary>
        /// Test VendordataUserIdPut
        /// </summary>
        [Test]
        public void VendordataUserIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Item115 item = null;
            //var response = instance.VendordataUserIdPut(id, item);
            //Assert.IsInstanceOf<int?> (response, "response is int?");
        }
        
        /// <summary>
        /// Test VendordataUserPost
        /// </summary>
        [Test]
        public void VendordataUserPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Item114 item = null;
            //var response = instance.VendordataUserPost(item);
            //Assert.IsInstanceOf<int?> (response, "response is int?");
        }
        
    }

}
